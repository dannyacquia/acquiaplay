<?php

/**
 * Implement hook_node_presave
 */

function elo_calculation_node_presave($node) {
    if ($node->type == 'match') {
        _elo_calculation_match_presave($node);
    }
}

function _elo_calculation_match_presave($node) {
    // Set variables for match data
    $p1 = $node->field_player1[LANGUAGE_NONE][0]['target_id'];
    $p3 = $node->field_player3[LANGUAGE_NONE][0]['target_id'];
    $p1_score = $node->field_player1_score[LANGUAGE_NONE][0]['value'];
    $p3_score = $node->field_player2_score[LANGUAGE_NONE][0]['value'];
    $game_term = $node->field_game_type[LANGUAGE_NONE][0]['tid'];
    define('ELO_CALCULATION_PP_SINGLES', 1);
    define('ELO_CALCULATION_FB_SINGLES', 2);
    define('ELO_CALCULATION_PP_DOUBLES', 6);
    define('ELO_CALCULATION_FB_DOUBLES', 11);

    // Check if match submitted was singles
    if (_elo_calculation_is_singles($game_term)) {
        // Pull data for users, total opponent rating, wins, and losses
        $p1_data = _elo_calculation_get_player_data($game_term, $p1);
        $p3_data = _elo_calculation_get_player_data($game_term, $p3);
        $p1_opp_rating = $p1_data['opprating'] + $p3_data['rating'];
        $p3_opp_rating = $p3_data['opprating'] + $p1_data['rating'];

        // Adjust wins and losses based on the scores of the match
        $wins_losses = _elo_calculation_calc_wins_losses($game_term, $p1_score, $p3_score, $p1_data['wins'], 0, $p3_data['wins'], 0, $p1_data['losses'], 0, $p3_data['losses'], 0);

        // Calculate the players ELO based on each others ELO and past matches
        $p1_elo = _elo_calculation_calc_elo_rating($p1_opp_rating, $p1_data['wins'], $p1_data['losses']);
        $p3_elo = _elo_calculation_calc_elo_rating($p3_opp_rating, $p3_data['wins'], $p3_data['losses']);

        // Update user data with new values
        _elo_calculation_update_player_data($game_term, $p1, $wins_losses['p1losses'], $wins_losses['p1wins'], $p1_elo, $p1_opp_rating, $p1_data['totgames']);
        _elo_calculation_update_player_data($game_term, $p3, $wins_losses['p3losses'], $wins_losses['p3wins'], $p3_elo, $p3_opp_rating, $p3_data['totgames']);
    }
    // Check if match submitted was doubles
    else {
        $p2 = $node->field_player2[LANGUAGE_NONE][0]['target_id'];
        $p4 = $node->field_player4[LANGUAGE_NONE][0]['target_id'];
        // Pull data for users, total opponent rating, wins, and losses
        /**
         * From Ted:
         *
         * Not sure what is best here. This is what I am thinking but usually I might try these
         * ideas then look at the code to see if think it is good. But I whether have you try it
         * and see what you think
         *
         * I think you could use _elo_calc_elo_calculation_get_player_data to get more information
         * what if you changed the function signature to this
         * _elo_calc_elo_calculation_get_player_data($game_term, $player, $opponents, $team_mate = NULL)
         *  $opponents : array of opponents, 1 or 2 depending
         *  $team_mate : might be null if singles
         *
         * this function could return ALL info about a player
         *  rating, opp_rating, wins, losses, total_games
         * You would then call the functions _elo_calculation_calc_wins_losses and _elo_calculation_calc_elo_rating
         *  from inside _elo_calculation_get_player_data
         *
         * What I am suggesting would actually be less efficient cpu wise then your current code
         *  but very little difference and  I think readability is much more important here
         */
        $p1_data = _elo_calculation_get_player_data($game_term, $p1);
        $p2_data = _elo_calculation_get_player_data($game_term, $p2);
        $p3_data = _elo_calculation_get_player_data($game_term, $p3);
        $p4_data = _elo_calculation_get_player_data($game_term, $p4);
        $team1_opp_rating = round(($p3_data['rating'] + $p4_data['rating']) / 2);
        $team2_opp_rating = round(($p1_data['rating'] + $p2_data['rating']) / 2);
        $p1_opp_rating = $p1_data['opprating'] + $team2_opp_rating;
        $p2_opp_rating = $p2_data['opprating'] + $team2_opp_rating;
        $p3_opp_rating = $p3_data['opprating'] + $team1_opp_rating;
        $p4_opp_rating = $p4_data['opprating'] + $team1_opp_rating;

        // Adjust wins and losses based on the scores of the match
        $wins_losses = _elo_calculation_calc_wins_losses($game_term, $p1_score, $p3_score, $p1_data['wins'], $p2_data['wins'], $p3_data['wins'], $p4_data['wins'], $p1_data['losses'], $p2_data['losses'], $p3_data['losses'], $p4_data['losses']);

        // Calculate the players ELO based on each others ELO and past matches
        $p1_elo = _elo_calculation_calc_elo_rating($p1_opp_rating, $p1_data['wins'], $p1_data['losses']);
        $p2_elo = _elo_calculation_calc_elo_rating($p2_opp_rating, $p2_data['wins'], $p2_data['losses']);
        $p3_elo = _elo_calculation_calc_elo_rating($p3_opp_rating, $p3_data['wins'], $p3_data['losses']);
        $p4_elo = _elo_calculation_calc_elo_rating($p4_opp_rating, $p4_data['wins'], $p4_data['losses']);
        // Update user data with new values
        /**
         * From Ted:
         *
         * if you make changes above you could simply do
         *  _elo_calc_elo_calculation_update_player_data($game_term, $p1, $p1_data).
         *
         * Then you wouldn't need any line between: _elo_calc_elo_calculation_get_player_data
         */
        _elo_calculation_update_player_data($game_term, $p1, $wins_losses['p1losses'], $wins_losses['p1wins'], $p1_elo, $p1_opp_rating, $p1_data['totgames']);
        _elo_calculation_update_player_data($game_term, $p2, $wins_losses['p2losses'], $wins_losses['p2wins'], $p2_elo, $p2_opp_rating, $p2_data['totgames']);
        _elo_calculation_update_player_data($game_term, $p3, $wins_losses['p3losses'], $wins_losses['p3wins'], $p3_elo, $p3_opp_rating, $p3_data['totgames']);
        _elo_calculation_update_player_data($game_term, $p4, $wins_losses['p4losses'], $wins_losses['p4wins'], $p4_elo, $p4_opp_rating, $p4_data['totgames']);
    }
}

function _elo_calculation_is_singles($game_term) {
    if ($game_term == ELO_CALCULATION_PP_SINGLES || $game_term == ELO_CALCULATION_FB_SINGLES) {
        return TRUE;
    }
    elseif ($game_term == ELO_CALCULATION_PP_DOUBLES || $game_term == ELO_CALCULATION_FB_DOUBLES) {
        return FALSE;
    }
    else {
        _elo_calculation_game_term_error_message($game_term);
    }
}

function _elo_calculation_is_foosball($game_term) {
    if ($game_term == ELO_CALCULATION_FB_SINGLES || $game_term == ELO_CALCULATION_FB_DOUBLES) {
        return TRUE;
    }
    elseif ($game_term == ELO_CALCULATION_PP_SINGLES || $game_term == ELO_CALCULATION_PP_DOUBLES) {
        return FALSE;
    }
    else {
        _elo_calculation_game_term_error_message($game_term);
    }
}

function _elo_calculation_game_term_error_message($game_term) {
    if (_elo_calculation_is_foosball($game_term)) {
        $game = "Foosball";
    }
    elseif (!_elo_calculation_is_foosball($game_term)) {
        $game = "Ping Pong";
    }
    else {
        watchdog('elo_calculation', 'Match type did not fall into ping pong or foosball');
        drupal_set_message(t('Error saving match: Not sure how you got here, but if you could please email nick.delrossi or danny.willford we will look into it. Sorry for the inconvenience!', 'error'));
        drupal_goto('node/add/match');
    }

    watchdog('elo_calculation', 'Player entered ' . $game . ' match that resulted in a tie');
    drupal_set_message(t('Error saving match: There is no crying in baseball...er...tying in ' . $game . '', 'warning'));
    drupal_goto('node/add/match');
}

function _elo_calculation_calc_wins_losses($game_term, $p1_score, $p3_score, $p1_wins, $p2_wins, $p3_wins, $p4_wins, $p1_losses, $p2_losses, $p3_losses, $p4_losses) {
    if ($p1_score > $p3_score) {
        $p1_wins = $p1_wins + 1;
        $p3_losses = $p3_losses +1;
        if (!_elo_calculation_is_singles($game_term)) {
            $p2_wins = $p2_wins +1;
            $p4_losses = $p4_losses +1;
        }
    }
    elseif ($p3_score > $p1_score) {
        $p3_wins = $p3_wins +1;
        $p1_losses = $p1_losses +1;
        if (!_elo_calculation_is_singles($game_term)) {
            $p2_losses = $p2_losses +1;
            $p4_wins = $p4_wins +1;
        }
    }
    else {
        _elo_calculation_game_term_error_message($game_term);
    }
    return array('p1wins' => $p1_wins, 'p1losses' => $p1_losses, 'p2wins' => $p2_wins, 'p2losses' => $p2_losses, 'p3wins' => $p3_wins, 'p3losses' => $p3_losses, 'p4wins' => $p4_wins, 'p4losses' => $p4_losses);
}

function _elo_calculation_calc_elo_rating($opp_rating, $wins, $losses) {
    $elo_calc = $opp_rating + 400 * ($wins - $losses);
    return round($elo_calc / ($wins + $losses));
}

function _elo_calculation_get_player_data($game_term, $player) {
    $player_data = entity_metadata_wrapper('user', $player);
    if (!_elo_calculation_is_foosball($game_term)) {
        $data = array('rating' => $player_data->field_ping_pong_rating->value(), 'opprating' => $player_data->field_total_pp_opponents_rating->value(), 'wins' => $player_data->field_wins->value(), 'losses' => $player_data->field_losses->value(), 'totgames' => $player_data->field_total_games_played->value());
    }
    elseif (_elo_calculation_is_foosball($game_term)) {
        $data = array('rating' => $player_data->field_foosball_rating->value(), 'opprating' => $player_data->field_total_fb_opponents_rating->value(), 'wins' => $player_data->field_foosball_wins->value(), 'losses' => $player_data->field_foosball_losses->value(), 'totgames' => $player_data->field_total_fb_games_played->value());
    }
    $data['totgames'] = $data['totgames'] + 1;
    return $data;
}

function _elo_calculation_update_player_data($game_term, $player, $player_losses, $player_wins, $player_rating, $player_opp_rating, $player_tot_games) {
    $player_data = entity_metadata_wrapper('user', $player);
    if (!_elo_calculation_is_foosball($game_term)) {
        $player_data->field_losses->set($player_losses);
        $player_data->field_wins->set($player_wins);
        $player_data->field_ping_pong_rating->set($player_rating);
        $player_data->field_total_pp_opponents_rating->set($player_opp_rating);
        $player_data->field_total_games_played->set($player_tot_games);
        $player_data->save();
    }
    elseif (_elo_calculation_is_foosball($game_term)) {
        $player_data->field_foosball_losses->set($player_losses);
        $player_data->field_foosball_wins->set($player_wins);
        $player_data->field_foosball_rating->set($player_rating);
        $player_data->field_total_fb_opponents_rating->set($player_opp_rating);
        $player_data->field_total_fb_games_played->set($player_tot_games);
        $player_data->save();
    }
}