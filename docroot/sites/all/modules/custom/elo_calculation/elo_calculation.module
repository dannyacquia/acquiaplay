<?php

/**
 * ** From Ted
 * These from my memory of the Drupal coding standards
 * https://www.drupal.org/coding-standards
 *
 * "Functions and variables should be named using lowercase, and words should be separated with an underscore.
 * Functions should in addition have the grouping/module name as a prefix, to avoid name collisions between modules.
 *
 * If you want you can use the Coder module to check this stuff(and others) for you.
 * https://www.drupal.org/project/coder
 *
 *
 * *** Functions Names
 * ALL function names should start with your module name or _
 *
 * so _get_player_data should be _elo_calculation_get_player_data
 *
 * This ensures that no 2 modules will ever declare the same function.
 * If you wanted shorted function names you could rename your module elo_calc
 *
 * *** Variable Names
 * variables should be named using lowercase, and words should be separated with an underscore.
 *
 * This should be pretty easy search and replace $p1score -> $p1_score
 *
 *
 *
 *
 */

/**
 * Implement hook_node_presave
 */

function elo_calculation_node_presave($node) {
    if ($node->type == 'match') {
      /**
       * ** From Ted
       * I suggest moving all code inside this if statment to
       * _elo_calculation_match_presave().
       *
       * So this function would just be a few lines.
       * But then if you have to do presaves on other node types in the future this function
       * doesn't contain other logic.
       */
        // Set variables for match data

        $p1 = $node->field_player1[LANGUAGE_NONE][0]['target_id'];
        $p3 = $node->field_player3[LANGUAGE_NONE][0]['target_id'];
        $p1score = $node->field_player1_score[LANGUAGE_NONE][0]['value'];
        $p3score = $node->field_player2_score[LANGUAGE_NONE][0]['value'];
      /**
       * From Ted:
       *
       * I would prefer a longer name here like $game_term, just easier to read.
       *
       * Also since you always accesses as "$gt[0]['tid']" then I would just change the line to
       *  $game_term = $node->field_game_type[LANGUAGE_NONE][0]['tid'];
       */
        $gt = $node->field_game_type[LANGUAGE_NONE];

        // Check if match submitted was singles
      /**
       * Instead of checking against integer use a constant.
       *
       * 1. at the top of the code define the constants
       *    define('ELO_CALCULATION_PP_SINGLES', 1);
       *    define('ELO_CALCULATION_FB_SINGLES', 2);
       * 2. Then test
       *    if ($game_term == ELO_CALCULATION_PP_SINGLES || $game_term == ELO_CALCULATION_FB_SINGLES)
       *    You can these is more readable for another programmers.
       *
       * I would probably go a step further and make a test function
       *
       * if (_elo_calculation_is_singles($game_term)) {
       *
       * You are doing the singles or doubles check multiple places in different functions
       *  You could replaces all of these if statements.
       */
        if ($gt[0]['tid'] == 1 || $gt[0]['tid'] == 2) {
            // Pull data for users, total opponent rating, wins, and losses
          /**
           * See notes below about _elo_calc_get_player_data
           */
            $p1data = _get_player_data($gt[0]['tid'], $p1);
            $p3data = _get_player_data($gt[0]['tid'], $p3);
            $p1opprating = $p1data['opprating'] + $p3data['rating'];
            $p3opprating = $p3data['opprating'] + $p1data['rating'];

            // Adjust wins and losses based on the scores of the match
            $wins_losses = _calc_wins_losses($gt[0]['tid'], $p1score, $p3score, $p1data['wins'], 0, $p3data['wins'], 0, $p1data['losses'], 0, $p3data['losses'], 0);

            // Calculate the players ELO based on each others ELO and past matches
            $p1elo = _calc_elo_rating($p1opprating, $p1data['wins'], $p1data['losses']);
            $p3elo = _calc_elo_rating($p3opprating, $p3data['wins'], $p3data['losses']);

            // Update user data with new values
            _update_player_data($gt[0]['tid'], $p1, $wins_losses['p1losses'], $wins_losses['p1wins'], $p1elo, $p1opprating, $p1data['totgames']);
            _update_player_data($gt[0]['tid'], $p3, $wins_losses['p3losses'], $wins_losses['p3wins'], $p3elo, $p3opprating, $p3data['totgames']);
        }
        // Check if match submitted was doubles
        elseif ($gt[0]['tid'] == 6 || $gt[0]['tid'] == 11) {
            $p2 = $node->field_player2[LANGUAGE_NONE][0]['target_id'];
            $p4 = $node->field_player4[LANGUAGE_NONE][0]['target_id'];
            // Pull data for users, total opponent rating, wins, and losses
          /**
           * From Ted:
           *
           * Not sure what is best here. This is what I am thinking but usually I might try these
           * ideas then look at the code to see if think it is good. But I whether have you try it
           * and see what you think
           *
           * I think you could use _elo_calc_get_player_data to get more information
           * what if you changed the function signature to this
           * _elo_calc_get_player_data($game_term, $player, $opponents, $team_mate = NULL)
           *  $opponents : array of opponents, 1 or 2 depending
           *  $team_mate : might be null if singles
           *
           * this function could return ALL info about a player
           *  rating, opp_rating, wins, losses, total_games
           * You would then call the functions _calc_wins_losses and _calc_elo_rating
           *  from inside _get_player_data
           *
           * What I am suggesting would actually be less efficient cpu wise then your current code
           *  but very little difference and  I think readability is much more important here
           */
            $p1data = _get_player_data($gt[0]['tid'], $p1);
            $p2data = _get_player_data($gt[0]['tid'], $p2);
            $p3data = _get_player_data($gt[0]['tid'], $p3);
            $p4data = _get_player_data($gt[0]['tid'], $p4);
            $team1opprating = round(($p3data['rating'] + $p4data['rating']) / 2);
            $team2opprating = round(($p1data['rating'] + $p2data['rating']) / 2);
            $p1opprating = $p1data['opprating'] + $team2opprating;
            $p2opprating = $p2data['opprating'] + $team2opprating;
            $p3opprating = $p3data['opprating'] + $team1opprating;
            $p4opprating = $p4data['opprating'] + $team1opprating;

            // Adjust wins and losses based on the scores of the match
            $wins_losses = _calc_wins_losses($gt[0]['tid'], $p1score, $p3score, $p1data['wins'], $p2data['wins'], $p3data['wins'], $p4data['wins'], $p1data['losses'], $p2data['losses'], $p3data['losses'], $p4data['losses']);

            // Calculate the players ELO based on each others ELO and past matches
            $p1elo = _calc_elo_rating($p1opprating, $p1data['wins'], $p1data['losses']);
            $p2elo = _calc_elo_rating($p2opprating, $p2data['wins'], $p2data['losses']);
            $p3elo = _calc_elo_rating($p3opprating, $p3data['wins'], $p3data['losses']);
            $p4elo = _calc_elo_rating($p4opprating, $p4data['wins'], $p4data['losses']);
            // Update user data with new values
          /**
           * From Ted:
           *
           * if you make changes above you could simply do
           *  _elo_calc_update_player_data($game_term, $p1, $p1_data).
           *
           * Then you wouldn't need any line between: _elo_calc_get_player_data
           */
            _update_player_data($gt[0]['tid'], $p1, $wins_losses['p1losses'], $wins_losses['p1wins'], $p1elo, $p1opprating, $p1data['totgames']);
            _update_player_data($gt[0]['tid'], $p2, $wins_losses['p2losses'], $wins_losses['p2wins'], $p2elo, $p2opprating, $p2data['totgames']);
            _update_player_data($gt[0]['tid'], $p3, $wins_losses['p3losses'], $wins_losses['p3wins'], $p3elo, $p3opprating, $p3data['totgames']);
            _update_player_data($gt[0]['tid'], $p4, $wins_losses['p4losses'], $wins_losses['p4wins'], $p4elo, $p4opprating, $p4data['totgames']);
        }
        else {
            _gt_error_message($gt[0]['tid']);
        }
    }
}


function _gt_error_message($gt) {
    if ($gt == 1 || $gt == 6) {
        $game = "Ping Pong";
    }
    elseif ($gt == 2 || $gt == 11) {
        $game = "Foosball";
    }
    else {
        watchdog('elo_calculation', 'Match type did not fall into ping pong or foosball');
        drupal_set_message('Error saving match: Not sure how you got here, but if you could please email nick.delrossi or danny.willford we will look into it. Sorry for the inconvenience!', 'error');
        drupal_goto('node/add/match');
    }

    watchdog('elo_calculation', 'Player entered ' . $game . ' match that resulted in a tie');
    drupal_set_message('Error saving match: There is no crying in baseball...er...tying in ' . $game . '', 'warning');
    drupal_goto('node/add/match');
}

function _calc_wins_losses($gt, $p1score, $p3score, $p1wins, $p2wins, $p3wins, $p4wins, $p1losses, $p2losses, $p3losses, $p4losses) {
    if ($p1score > $p3score) {
        $p1wins = $p1wins + 1;
        $p3losses = $p3losses +1;
        if ($gt == 6 || $gt == 11) {
            $p2wins = $p2wins +1;
            $p4losses = $p4losses +1;
        }
    }
    elseif ($p3score > $p1score) {
        $p3wins = $p3wins +1;
        $p1losses = $p1losses +1;
        if ($gt == 6 || $gt == 11) {
            $p2losses = $p2losses +1;
            $p4wins = $p4wins +1;
        }
    }
    else {
        _gt_error_message($gt[0]['tid']);
    }
    return array('p1wins' => $p1wins, 'p1losses' => $p1losses, 'p2wins' => $p2wins, 'p2losses' => $p2losses, 'p3wins' => $p3wins, 'p3losses' => $p3losses, 'p4wins' => $p4wins, 'p4losses' => $p4losses);
}

function _calc_elo_rating($opprating, $wins, $losses) {
    $elocalc = $opprating + 400 * ($wins - $losses);
    return round($elocalc / ($wins + $losses));
}

function _get_player_data($gt, $player) {
    $playerdata = entity_metadata_wrapper('user', $player);
    if ($gt == 1 || $gt == 6) {
        $data = array('rating' => $playerdata->field_ping_pong_rating->value(), 'opprating' => $playerdata->field_total_pp_opponents_rating->value(), 'wins' => $playerdata->field_wins->value(), 'losses' => $playerdata->field_losses->value(), 'totgames' => $playerdata->field_total_games_played->value());
    }
    elseif ($gt == 2 || $gt == 11) {
        $data = array('rating' => $playerdata->field_foosball_rating->value(), 'opprating' => $playerdata->field_total_fb_opponents_rating->value(), 'wins' => $playerdata->field_foosball_wins->value(), 'losses' => $playerdata->field_foosball_losses->value(), 'totgames' => $playerdata->field_total_fb_games_played->value());
    }
    $data['totgames'] = $data['totgames'] + 1;
    return $data;
}

function _update_player_data($gt, $player, $playerlosses, $playerwins, $playerrating, $playeropprating, $playertotgames) {
    $playerdata = entity_metadata_wrapper('user', $player);
    if ($gt == 1 || $gt == 6) {
        $playerdata->field_losses->set($playerlosses);
        $playerdata->field_wins->set($playerwins);
        $playerdata->field_ping_pong_rating->set($playerrating);
        $playerdata->field_total_pp_opponents_rating->set($playeropprating);
        $playerdata->field_total_games_played->set($playertotgames);
        $playerdata->save();
    }
    elseif ($gt == 2 || $gt == 11) {
        $playerdata->field_foosball_losses->set($playerlosses);
        $playerdata->field_foosball_wins->set($playerwins);
        $playerdata->field_foosball_rating->set($playerrating);
        $playerdata->field_total_fb_opponents_rating->set($playeropprating);
        $playerdata->field_total_fb_games_played->set($playertotgames);
        $playerdata->save();
    }
}
